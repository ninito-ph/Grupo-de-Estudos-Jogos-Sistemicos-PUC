using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

/// <summary>
/// U.u
/// </summary>
namespace VoxelEngine
{
    /*
        Classe tal que faz tal coisa

        Obsolete:
            No (or Yes + Why?)

        Problems:
            - TAL PROBLEMA
            - TAL PROBLEMA
    */
    public class HexagonHelper
    {
        public float variavelNaoEstatica; //variavel_nao_estatica
        public static float VariavelEstatica; //Variavel_estatica
        public readonly static float CONSTANTE_INCRIVEL; 

        public static float off = 0;
        public static float force = 50;

        public readonly static float SIZE_Z = 1.5f;
        public readonly static float SIZE_X = 0.866025f;

        public static float[] GetHeightsFor(float x,float z)
        {
            return new float[]{
                GetPointAtPerlin(new Vector2(x + 0.866025f,z + 0.5f)),
                GetPointAtPerlin(new Vector2(x + 0.866025f,z - 0.5f)),
                GetPointAtPerlin(new Vector2(x,z - 1f)),
                GetPointAtPerlin(new Vector2(x - 0.866025f,z - 0.5f)),
                GetPointAtPerlin(new Vector2(x - 0.866025f,z + 0.5f)),
                GetPointAtPerlin(new Vector2(x,z + 1f))
            };
        }

        public static float GetPointAtPerlin(Vector2 point)
        {
            return Mathf.PerlinNoise(off + point.x * 1/64f,off*Mathf.PI + point.y * 1/64f) * force;
        }
    }

    /*
        Used to generate meshs
    */
    public class MeshBuilder
    {
        int[] triangles;
        Vector3[] vertices;
        Color[] colors;

        int vertices_count = 0;
        int triangles_count = 0;
        int size = 64000;

        public MeshBuilder()
        {
            triangles = new int[size];
            vertices = new Vector3[size];
            colors = new Color[size];
        }

        public MeshBuilder(int size)
        {
            size = 8192;

            triangles = new int[size];
            vertices = new Vector3[size];
            colors = new Color[size];
        }

        public void AddHexagon(float x,float y,float z,float[] h,Color[] color)
        {
            vertices[vertices_count] = new Vector3(x + 0.866025f,y + h[0],z + 0.5f);
            vertices[vertices_count + 1] = new Vector3(x + 0.866025f,y  + h[1],z - 0.5f);
            vertices[vertices_count + 2] = new Vector3(x,y + h[2],z - 1);
            vertices[vertices_count + 3] = new Vector3(x - 0.866025f,y + h[3],z - 0.5f);
            vertices[vertices_count + 4] = new Vector3(x - 0.866025f,y + h[4],z + 0.5f);
            vertices[vertices_count + 5] = new Vector3(x,y + h[5],z + 1);

            colors[vertices_count] = color[0];
            colors[vertices_count + 1] = color[1];
            colors[vertices_count + 2] = color[2];
            colors[vertices_count + 3] = color[3];
            colors[vertices_count + 4] = color[4];
            colors[vertices_count + 5] = color[5];
            
            triangles[triangles_count] = vertices_count;
            triangles[triangles_count + 1] = vertices_count + 1;
            triangles[triangles_count + 2] = vertices_count + 2;

            triangles[triangles_count + 3] = vertices_count;
            triangles[triangles_count + 4] = vertices_count + 2;
            triangles[triangles_count + 5] = vertices_count + 3;

            triangles[triangles_count + 6] = vertices_count;
            triangles[triangles_count + 7] = vertices_count + 3;
            triangles[triangles_count + 8] = vertices_count + 5;

            triangles[triangles_count + 9] = vertices_count + 3;
            triangles[triangles_count + 10] = vertices_count + 4;
            triangles[triangles_count + 11] = vertices_count + 5;

            triangles_count += 12;
            vertices_count += 6;
        }

        public void AddHexagon(float x,float y,float z,float[] h,Color color)
        {
            vertices[vertices_count] = new Vector3(x + 0.866025f,y + h[0],z + 0.5f);
            vertices[vertices_count + 1] = new Vector3(x + 0.866025f,y  + h[1],z - 0.5f);
            vertices[vertices_count + 2] = new Vector3(x,y + h[2],z - 1);
            vertices[vertices_count + 3] = new Vector3(x - 0.866025f,y + h[3],z - 0.5f);
            vertices[vertices_count + 4] = new Vector3(x - 0.866025f,y + h[4],z + 0.5f);
            vertices[vertices_count + 5] = new Vector3(x,y + h[5],z + 1);

            colors[vertices_count] = color;
            colors[vertices_count + 1] = color;
            colors[vertices_count + 2] = color;
            colors[vertices_count + 3] = color;
            colors[vertices_count + 4] = color;
            colors[vertices_count + 5] = color;
            
            triangles[triangles_count] = vertices_count;
            triangles[triangles_count + 1] = vertices_count + 1;
            triangles[triangles_count + 2] = vertices_count + 2;

            triangles[triangles_count + 3] = vertices_count;
            triangles[triangles_count + 4] = vertices_count + 2;
            triangles[triangles_count + 5] = vertices_count + 3;

            triangles[triangles_count + 6] = vertices_count;
            triangles[triangles_count + 7] = vertices_count + 3;
            triangles[triangles_count + 8] = vertices_count + 5;

            triangles[triangles_count + 9] = vertices_count + 3;
            triangles[triangles_count + 10] = vertices_count + 4;
            triangles[triangles_count + 11] = vertices_count + 5;

            triangles_count += 12;
            vertices_count += 6;
        }

        public void AddHexagon(float x,float y,float z,Color color)
        {
            vertices[vertices_count] = new Vector3(x + 0.866025f,y,z + 0.5f);
            vertices[vertices_count + 1] = new Vector3(x + 0.866025f,y,z - 0.5f);
            vertices[vertices_count + 2] = new Vector3(x,y,z - 1);
            vertices[vertices_count + 3] = new Vector3(x - 0.866025f,y,z - 0.5f);
            vertices[vertices_count + 4] = new Vector3(x - 0.866025f,y,z + 0.5f);
            vertices[vertices_count + 5] = new Vector3(x,y,z + 1);

            colors[vertices_count] = color;
            colors[vertices_count + 1] = color;
            colors[vertices_count + 2] = color;
            colors[vertices_count + 3] = color;
            colors[vertices_count + 4] = color;
            colors[vertices_count + 5] = color;
            
            triangles[triangles_count] = vertices_count;
            triangles[triangles_count + 1] = vertices_count + 1;
            triangles[triangles_count + 2] = vertices_count + 2;

            triangles[triangles_count + 3] = vertices_count;
            triangles[triangles_count + 4] = vertices_count + 2;
            triangles[triangles_count + 5] = vertices_count + 3;

            triangles[triangles_count + 6] = vertices_count;
            triangles[triangles_count + 7] = vertices_count + 3;
            triangles[triangles_count + 8] = vertices_count + 5;

            triangles[triangles_count + 9] = vertices_count + 3;
            triangles[triangles_count + 10] = vertices_count + 4;
            triangles[triangles_count + 11] = vertices_count + 5;

            triangles_count += 12;
            vertices_count += 6;
        }

        public void AddHexagon(float x,float y,float z,float h,Color color)
        {
            vertices[vertices_count] = new Vector3(x + 0.866025f,y + h,z + 0.5f);
            vertices[vertices_count + 1] = new Vector3(x + 0.866025f,y + h,z - 0.5f);
            vertices[vertices_count + 2] = new Vector3(x,y + h,z - 1);
            vertices[vertices_count + 3] = new Vector3(x - 0.866025f,y + h,z - 0.5f);
            vertices[vertices_count + 4] = new Vector3(x - 0.866025f,y + h,z + 0.5f);
            vertices[vertices_count + 5] = new Vector3(x,y + h,z + 1);

            colors[vertices_count] = color;
            colors[vertices_count + 1] = color;
            colors[vertices_count + 2] = color;
            colors[vertices_count + 3] = color;
            colors[vertices_count + 4] = color;
            colors[vertices_count + 5] = color;
            
            triangles[triangles_count] = vertices_count;
            triangles[triangles_count + 1] = vertices_count + 1;
            triangles[triangles_count + 2] = vertices_count + 2;

            triangles[triangles_count + 3] = vertices_count;
            triangles[triangles_count + 4] = vertices_count + 2;
            triangles[triangles_count + 5] = vertices_count + 3;

            triangles[triangles_count + 6] = vertices_count;
            triangles[triangles_count + 7] = vertices_count + 3;
            triangles[triangles_count + 8] = vertices_count + 5;

            triangles[triangles_count + 9] = vertices_count + 3;
            triangles[triangles_count + 10] = vertices_count + 4;
            triangles[triangles_count + 11] = vertices_count + 5;

            triangles_count += 12;
            vertices_count += 6;
        }

        public void AddStackedHexagon(float x,float y,float z,float h,float[] nh,Color color)
        {
            vertices[vertices_count] = new Vector3(x + 0.866025f,y + h,z + 0.5f);
            vertices[vertices_count + 1] = new Vector3(x + 0.866025f,y + h,z - 0.5f);
            vertices[vertices_count + 2] = new Vector3(x,y + h,z - 1);
            vertices[vertices_count + 3] = new Vector3(x - 0.866025f,y + h,z - 0.5f);
            vertices[vertices_count + 4] = new Vector3(x - 0.866025f,y + h,z + 0.5f);
            vertices[vertices_count + 5] = new Vector3(x,y + h,z + 1);

            colors[vertices_count] = color;
            colors[vertices_count + 1] = color;
            colors[vertices_count + 2] = color;
            colors[vertices_count + 3] = color;
            colors[vertices_count + 4] = color;
            colors[vertices_count + 5] = color;
            
            triangles[triangles_count] = vertices_count;
            triangles[triangles_count + 1] = vertices_count + 1;
            triangles[triangles_count + 2] = vertices_count + 2;
            triangles[triangles_count + 3] = vertices_count;
            triangles[triangles_count + 4] = vertices_count + 2;
            triangles[triangles_count + 5] = vertices_count + 3;
            triangles[triangles_count + 6] = vertices_count;
            triangles[triangles_count + 7] = vertices_count + 3;
            triangles[triangles_count + 8] = vertices_count + 5;
            triangles[triangles_count + 9] = vertices_count + 3;
            triangles[triangles_count + 10] = vertices_count + 4;
            triangles[triangles_count + 11] = vertices_count + 5;

            triangles_count += 12;
            vertices_count += 6;

            //Add lateral faces
            AddLateralFacesHex(new Vector3(x + 0.866025f,y + h,z + 0.5f),new Vector3(x + 0.866025f,y + h,z - 0.5f),nh[1],color);
            AddLateralFacesHex(new Vector3(x + 0.866025f,y + h,z - 0.5f),new Vector3(x,y + h,z - 1),nh[2],color);
            AddLateralFacesHex(new Vector3(x,y + h,z - 1),new Vector3(x - 0.866025f,y + h,z - 0.5f),nh[3],color);
            AddLateralFacesHex(new Vector3(x - 0.866025f,y + h,z - 0.5f),new Vector3(x - 0.866025f,y + h,z + 0.5f),nh[4],color);
            AddLateralFacesHex(new Vector3(x - 0.866025f,y + h,z + 0.5f),new Vector3(x,y + h,z + 1),nh[5],color);
            AddLateralFacesHex(new Vector3(x,y + h,z + 1),new Vector3(x + 0.866025f,y + h,z + 0.5f),nh[0],color);
        }

        private void AddLateralFacesHex(Vector3 a,Vector3 b,float h,Color color)
        {
            if(h <= 0)
                return;

            vertices[vertices_count] = a;
            vertices[vertices_count + 1] = b;

            vertices[vertices_count + 2] = a + new Vector3(0,-h,0);
            vertices[vertices_count + 3] = b + new Vector3(0,-h,0);

            triangles[triangles_count] = vertices_count + 2;
            triangles[triangles_count + 1] = vertices_count + 1;
            triangles[triangles_count + 2] = vertices_count;

            triangles[triangles_count + 3] = vertices_count + 1;
            triangles[triangles_count + 4] = vertices_count + 2;
            triangles[triangles_count + 5] = vertices_count + 3;

            colors[vertices_count] = color;
            colors[vertices_count + 1] = color;
            colors[vertices_count + 2] = color;
            colors[vertices_count + 3] = color;

            vertices_count += 4;
            triangles_count += 6;
        }

        public void AddCube(float x,float y,float z,float sx,float sy,float sz,Direction faces,Color[] color)
        {
            float bx = x + sx;
            float by = y + sy;
            float bz = z + sz;
        
            if((faces & Direction.Top) != 0) //Y+
            {
                vertices[vertices_count] = new Vector3(x,by,z);
                vertices[vertices_count + 1] = new Vector3(bx,by,z);
                vertices[vertices_count + 2] = new Vector3(x,by,bz);
                vertices[vertices_count + 3] = new Vector3(bx,by,bz);

                colors[vertices_count] = color[3];
                colors[vertices_count + 1] = color[3];
                colors[vertices_count + 2] = color[3];
                colors[vertices_count + 3] = color[3];
               
                triangles[triangles_count] = vertices_count + 2;
                triangles[triangles_count + 1] = vertices_count + 1;
                triangles[triangles_count + 2] = vertices_count;

                triangles[triangles_count + 3] = vertices_count + 1;
                triangles[triangles_count + 4] = vertices_count + 2;
                triangles[triangles_count + 5] = vertices_count + 3;

                vertices_count += 4;
                triangles_count += 6;
            }

            if((faces & Direction.Bottom) != 0) //Y-
            {
                vertices[vertices_count] = new Vector3(x,y,z);
                vertices[vertices_count + 1] = new Vector3(bx,y,z);
                vertices[vertices_count + 2] = new Vector3(x,y,bz);
                vertices[vertices_count + 3] = new Vector3(bx,y,bz);

                colors[vertices_count] = color[2];
                colors[vertices_count + 1] = color[2];
                colors[vertices_count + 2] = color[2];
                colors[vertices_count + 3] = color[2];
               
                triangles[triangles_count] = vertices_count;
                triangles[triangles_count + 1] = vertices_count + 1;
                triangles[triangles_count + 2] = vertices_count + 2;

                triangles[triangles_count + 3] = vertices_count + 3;
                triangles[triangles_count + 4] = vertices_count + 2;
                triangles[triangles_count + 5] = vertices_count + 1;

                vertices_count += 4;
                triangles_count += 6;
            }

            if((faces & Direction.West) != 0) //X-
            {
                vertices[vertices_count] = new Vector3(x,y,z);
                vertices[vertices_count + 1] = new Vector3(x,by,z);
                vertices[vertices_count + 2] = new Vector3(x,y,bz);
                vertices[vertices_count + 3] = new Vector3(x,by,bz);

                colors[vertices_count] = color[0];
                colors[vertices_count + 1] = color[0];
                colors[vertices_count + 2] = color[0];
                colors[vertices_count + 3] = color[0];
               
                triangles[triangles_count] = vertices_count + 2;
                triangles[triangles_count + 1] = vertices_count + 1;
                triangles[triangles_count + 2] = vertices_count;

                triangles[triangles_count + 3] = vertices_count + 1;
                triangles[triangles_count + 4] = vertices_count + 2;
                triangles[triangles_count + 5] = vertices_count + 3;

                vertices_count += 4;
                triangles_count += 6;
            }

            if((faces & Direction.East) != 0) //X+
            {
                vertices[vertices_count] = new Vector3(bx,y,z);
                vertices[vertices_count + 1] = new Vector3(bx,by,z);
                vertices[vertices_count + 2] = new Vector3(bx,y,bz);
                vertices[vertices_count + 3] = new Vector3(bx,by,bz);

                colors[vertices_count] = color[1];
                colors[vertices_count + 1] = color[1];
                colors[vertices_count + 2] = color[1];
                colors[vertices_count + 3] = color[1];
               
                triangles[triangles_count] = vertices_count;
                triangles[triangles_count + 1] = vertices_count + 1;
                triangles[triangles_count + 2] = vertices_count + 2;

                triangles[triangles_count + 3] = vertices_count + 3;
                triangles[triangles_count + 4] = vertices_count + 2;
                triangles[triangles_count + 5] = vertices_count + 1;

                vertices_count += 4;
                triangles_count += 6;
            }

            if((faces & Direction.North) != 0) //Z+
            {
                vertices[vertices_count] = new Vector3(x,y,bz);
                vertices[vertices_count + 1] = new Vector3(x,by,bz);
                vertices[vertices_count + 2] = new Vector3(bx,y,bz);
                vertices[vertices_count + 3] = new Vector3(bx,by,bz);

                colors[vertices_count] = color[5];
                colors[vertices_count + 1] = color[5];
                colors[vertices_count + 2] = color[5];
                colors[vertices_count + 3] = color[5];
               
                triangles[triangles_count] = vertices_count + 2;
                triangles[triangles_count + 1] = vertices_count + 1;
                triangles[triangles_count + 2] = vertices_count;

                triangles[triangles_count + 3] = vertices_count + 1;
                triangles[triangles_count + 4] = vertices_count + 2;
                triangles[triangles_count + 5] = vertices_count + 3;

                vertices_count += 4;
                triangles_count += 6;
            }

            if((faces & Direction.South) != 0) //Z-
            {
                vertices[vertices_count] = new Vector3(x,y,z);
                vertices[vertices_count + 1] = new Vector3(x,by,z);
                vertices[vertices_count + 2] = new Vector3(bx,y,z);
                vertices[vertices_count + 3] = new Vector3(bx,by,z);

                colors[vertices_count] = color[4];
                colors[vertices_count + 1] = color[4];
                colors[vertices_count + 2] = color[4];
                colors[vertices_count + 3] = color[4];
               
                triangles[triangles_count] = vertices_count;
                triangles[triangles_count + 1] = vertices_count + 1;
                triangles[triangles_count + 2] = vertices_count + 2;

                triangles[triangles_count + 3] = vertices_count + 3;
                triangles[triangles_count + 4] = vertices_count + 2;
                triangles[triangles_count + 5] = vertices_count + 1;

                vertices_count += 4;
                triangles_count += 6;
            }
        }

        public void AddCube(float x,float y,float z,float sx,float sy,float sz,Direction faces,Color color)
        {
            AddCube(x,y,z,sx,sy,sz,faces,new Color[]{
                color,color,color,color,color,color
            });
        }

        public void AddCube(float x,float y,float z,Direction faces,Color color)
        {
            AddCube(x,y,z,1,1,1,faces,new Color[]{
                color,color,color,color,color,color
            });
        }

        public void AddCube(float x,float y,float z,Direction faces,Color[] color)
        {
            AddCube(x,y,z,1,1,1,faces,color);
        }
        
        public Mesh Create()
        {
            Mesh mh = new Mesh();

            mh.vertices = vertices.Take(vertices_count).ToArray();
            mh.triangles = triangles.Take(triangles_count).ToArray();
            mh.colors = colors.Take(vertices_count).ToArray();
            
            mh.RecalculateNormals();
            return mh;
        }

        public void Clear()
        {
            triangles = new int[size];
            vertices = new Vector3[size];
            colors = new Color[size];
            vertices_count = 0;
            triangles_count = 0;
        }
    }
}
